// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Reduxion (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä + –ª–∞—É–Ω—á–µ—Ä)

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

class ProjectManager {
    constructor() {
        this.webServerProcess = null;
        this.launcherProcess = null;
        this.isWindows = process.platform === 'win32';
    }

    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    async startWebServer() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');

        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
            const webAppPath = path.join(__dirname, '..', 'index.html');
            const hasWebApp = fs.existsSync(webAppPath);

            if (hasWebApp) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...');

                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä
                const serverPath = path.join(__dirname, 'start-dev-server.js');

                this.webServerProcess = spawn('node', [serverPath], {
                    stdio: 'inherit',
                    shell: true,
                    cwd: __dirname
                });

                this.webServerProcess.on('error', (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞:', error.message);
                    reject(error);
                });

                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                setTimeout(() => {
                    console.log('‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
                    resolve();
                }, 2000);

            } else {
                console.log('‚ö†Ô∏è –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
                console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É');
                resolve();
            }
        });
    }

    // –ó–∞–ø—É—Å–∫ –ª–∞—É–Ω—á–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async startLauncher() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Reduxion Launcher...');

        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            const nodeModulesPath = path.join(__dirname, 'node_modules');
            if (!fs.existsSync(nodeModulesPath)) {
                console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
                exec('npm install', { cwd: __dirname }, (error) => {
                    if (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
                        reject(error);
                        return;
                    }

                    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                    this.launchLauncherApp();
                });
            } else {
                this.launchLauncherApp();
            }

            function launchLauncherApp() {
                this.launcherProcess = spawn('npm', ['start'], {
                    stdio: 'inherit',
                    shell: true,
                    cwd: __dirname
                });

                this.launcherProcess.on('error', (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞:', error.message);
                    reject(error);
                });

                setTimeout(() => {
                    console.log('‚úÖ Reduxion Launcher –∑–∞–ø—É—â–µ–Ω');
                    resolve();
                }, 3000);
            }
        });
    }

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    async runTests() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

        try {
            const { LauncherTester } = require('./test-launcher');
            const tester = new LauncherTester();
            await tester.initialize();
            await tester.runAllTests();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    async stopAll() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

        if (this.webServerProcess) {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
            if (this.isWindows) {
                spawn('taskkill', ['/pid', this.webServerProcess.pid, '/f'], { stdio: 'inherit' });
            } else {
                this.webServerProcess.kill('SIGTERM');
            }
        }

        if (this.launcherProcess) {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞...');
            if (this.isWindows) {
                spawn('taskkill', ['/pid', this.launcherProcess.pid, '/f'], { stdio: 'inherit' });
            } else {
                this.launcherProcess.kill('SIGTERM');
            }
        }

        console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    async checkSystem() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...');

        const checks = [
            { name: 'Node.js', check: () => process.version.startsWith('v') },
            { name: 'npm', check: () => require('child_process').execSync('npm --version', { encoding: 'utf8' }) },
            { name: 'Git', check: () => {
                try {
                    require('child_process').execSync('git --version', { encoding: 'utf8' });
                    return true;
                } catch {
                    return false;
                }
            }}
        ];

        let allPassed = true;

        checks.forEach(check => {
            try {
                const result = check.check();
                if (result) {
                    console.log(`‚úÖ ${check.name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                } else {
                    console.log(`‚ùå ${check.name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                    allPassed = false;
                }
            } catch (error) {
                console.log(`‚ùå ${check.name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`);
                allPassed = false;
            }
        });

        return allPassed;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
    async start() {
        console.log('üéØ Reduxion Project Manager');
        console.log('==========================\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        const systemReady = await this.checkSystem();
        if (!systemReady) {
            console.log('\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            await this.startWebServer();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
            await this.startLauncher();

            console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç Reduxion —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
            console.log('==============================');
            console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: http://localhost:3000');
            console.log('üöÄ –õ–∞—É–Ω—á–µ—Ä: –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ');
            console.log('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –æ—Ç–∫—Ä–æ–π—Ç–µ README.md');
            console.log('\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');

        } catch (error) {
            console.error('\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
            await this.stopAll();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    setupExitHandlers() {
        const exitHandler = async (signal) => {
            console.log(`\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
            await this.stopAll();
            process.exit(0);
        };

        process.on('SIGINT', exitHandler);
        process.on('SIGTERM', exitHandler);
        process.on('SIGBREAK', exitHandler);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ Ctrl+C
        if (this.isWindows) {
            require('readline').createInterface({
                input: process.stdin,
                output: process.stdout
            }).on('SIGINT', exitHandler);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const manager = new ProjectManager();
    manager.setupExitHandlers();
    manager.start().catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = ProjectManager;