// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–∞—É–Ω—á–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

const ReduxManager = require('./redux-manager');
const { ReduxionAPI, ReduxCache } = require('./api-client');

class LauncherTester {
    constructor() {
        this.reduxManager = null;
        this.api = new ReduxionAPI();
        this.cache = new ReduxCache();
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è GTA 5
    async testGTADetection() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è GTA 5...');

        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)
            const testPath = await this.reduxManager.detectGTAPath();

            if (testPath) {
                console.log('‚úÖ –ü–∞–ø–∫–∞ —Å GTA 5 –Ω–∞–π–¥–µ–Ω–∞:', testPath);
                return true;
            } else {
                console.log('‚ùå –ü–∞–ø–∫–∞ —Å GTA 5 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ GTA 5:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏ –∫ –∏–≥—Ä–µ
    async testPathValidation(gamePath) {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏ –∫ –∏–≥—Ä–µ...');

        try {
            const isValid = await this.reduxManager.validateGTAPath(gamePath);

            if (isValid) {
                console.log('‚úÖ –ü—É—Ç—å –∫ –∏–≥—Ä–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
                return true;
            } else {
                console.log('‚ùå –ü—É—Ç—å –∫ –∏–≥—Ä–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–¥—É–∫—Å–æ–≤
    async testReduxList() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–¥—É–∫—Å–æ–≤...');

        try {
            const reduxList = await this.api.getReduxList({ limit: 5 });

            if (reduxList && reduxList.length > 0) {
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–¥—É–∫—Å–æ–≤: ${reduxList.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                reduxList.forEach((redux, index) => {
                    console.log(`  ${index + 1}. ${redux.title} (${redux.category})`);
                });
                return true;
            } else {
                console.log('‚ùå –°–ø–∏—Å–æ–∫ —Ä–µ–¥—É–∫—Å–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–¥—É–∫—Å–æ–≤:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    async testAPIConnection() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');

        try {
            const isConnected = await this.api.checkConnection();

            if (isConnected) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return true;
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
    async testCache() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∞...');

        try {
            const testData = { test: 'data', timestamp: Date.now() };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
            await this.cache.set('test-key', testData);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            const cachedData = await this.cache.get('test-key');

            if (cachedData && cachedData.test === 'data') {
                console.log('‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                return true;
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞');
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–¥—É–∫—Å–æ–≤
    async testInstalledReduxes() {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–¥—É–∫—Å–æ–≤...');

        try {
            const installed = await this.reduxManager.getInstalledReduxes();

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–¥—É–∫—Å–æ–≤: ${installed.length}`);
            installed.forEach((redux, index) => {
                console.log(`  ${index + 1}. ${redux.name} v${redux.version} - ${redux.enabled ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`);
            });

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–¥—É–∫—Å–æ–≤:', error.message);
            return false;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    async runAllTests() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Reduxion Launcher...\n');

        const tests = [
            { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API', test: () => this.testAPIConnection() },
            { name: '–ö—ç—à —Å–∏—Å—Ç–µ–º–∞', test: () => this.testCache() },
            { name: '–°–ø–∏—Å–æ–∫ —Ä–µ–¥—É–∫—Å–æ–≤', test: () => this.testReduxList() },
        ];

        let passed = 0;
        let failed = 0;

        for (const test of tests) {
            try {
                const result = await test.test();
                if (result) {
                    passed++;
                    console.log(`‚úÖ ${test.name} - –ü–†–û–ô–î–ï–ù\n`);
                } else {
                    failed++;
                    console.log(`‚ùå ${test.name} - –ù–ï –ü–†–û–ô–î–ï–ù\n`);
                }
            } catch (error) {
                failed++;
                console.log(`‚ùå ${test.name} - –û–®–ò–ë–ö–ê: ${error.message}\n`);
            }
        }

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
        console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%\n`);

        if (failed === 0) {
            console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
    async initialize() {
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–¥—É–∫—Å–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        this.reduxManager = new ReduxManager({
            gtaPath: 'C:\\Program Files\\Rockstar Games\\Grand Theft Auto V',
            gameExe: 'GTA5.exe',
            reduxionUrl: 'http://localhost:3000',
            autoInstall: true
        });

        console.log('‚úÖ –¢–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new LauncherTester();

    tester.initialize().then(() => {
        return tester.runAllTests();
    }).catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    });
}

module.exports = LauncherTester;